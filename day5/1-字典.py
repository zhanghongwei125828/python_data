# dict

# 数据类型划分 : 可变数据类型 , 不可变数据类型
# 不可变数据类型: 元组,布尔,数字 字符串               #可哈希
# 可变数据类型  : 列表, 字典, 集合                   #不可哈希

# dict key 必须是不可变数据类型 , 可哈希
# value: 任意数据类型.
# dict 优点: (1)二分查找  (2)存储大量的关系型数据

dict1 = {1 :'a',2 :'b',3 :'c',4 :'d'}

################################################################################

# 示例1:
# print(dict1)    # 输出结果: {1: 'a', 2: 'b', 3: 'c', 4: 'd'}

################################################################################
# dict 增删改查

# 增
# 方法1
# dict1[5] = 'e'  # 如果字典里面没有这个键值对增加 , 如果有则值被覆盖
# print(dict1)    #{1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e'}

# 方法2
# dict1.setdefault(6,'f')    # setdefault(key,value)   #有键值对不作任何改变,没有添加
# print(dict1)               # 输出结果 {1: 'a', 2: 'b', 3: 'c', 4: 'd', 6: 'f'}

################################################################################

# 删
# 方法一:
# dict1.pop(1)   # 有返回值 # 按照键去删除(key)
# print(dict1)   # 输出结果 # {2: 'b', 3: 'c', 4: 'd'}
# 如果没有删除的键值
# print(dict1.pop(8,'没有此键'))  # 可以设置提示,如果再删除是不确定有没有此键值

# 方法二:
# dict1.popitem()  # 随机删除 有返回值 返回的是元组
# print(dict1)

# 方法三:
# del dict1[3]
# print(dict1)   # 输出结果: {1: 'a', 2: 'b', 4: 'd'}
# del dict1      # 删除整个字典

# 方法四:
# dict1.clear()    # 清空字典
# print(dict1)     # 返回值: {}

################################################################################

# 改
# 方法一:
# dict1[4] = 'e'  # 如果字典里面没有这个键值对增加 , 如果有则值被覆盖(覆盖即为改)
# print(dict1)

# 方法二:
# dict2 = {1:"A",7:"b"}
# dict2.update(dict1)
# print(dict1)
# print(dict2)
                   # 把dict1的所有键值对更新到dict2,有的就覆盖,没有就添加
# 打印结果 :
# {1: 'a', 2: 'b', 3: 'c', 4: 'd'}
# {1: 'a', 7: 'b', 2: 'b', 3: 'c', 4: 'd'}


###################################################################################

# 查
print(dict1.keys(),type(dict1.keys()))       # 得到一个特殊的数据类型 dict_keys
print(dict1.values(),type(dict1.values()))   # 得到一个特殊的数据类型 dict_values
print(dict1.items(),type(dict1.items()))     # 得到一个特殊的数据类型 dict_items
#
#
for i in dict1:
    print(i)        # 打印出来的是键

for x in dict1.values():
    print(x)        # 打印出来的是值

for y in  dict1.items():
    print(y)        # 打印出来的是元组 ,元组里面是键值对

for a,b in dict1.items():
    print(a,b)      # 直接打印键值对,没有符号,没有元组,多个变量分别接收

# 可以查看一个键值对的值, 但有一个缺点.如果查找无键值对直接报错
v1 = dict1[1]
print(v1)

print(dict1.get(1))  # 如果查询有此键值对直接打印值 , 如果没有此键值对,默认打印None,也可以自定义,这种查方法首选

##################################################################################################################

